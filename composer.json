{
    "name": "fiisoft/jackdaw-stream",
    "type": "library",
    "description": "A powerfull and unique library to provide stream-like operations on iterable data. Full of bugs and still quite funny.",
    "keywords": [
        "streams", "iterators", "generators", "data processing", "functional programming", "pipes and filters", "etl"
    ],
    "homepage": "https://github.com/fiiSoft/fiisoft-jackdaw-stream",
    "license": "MIT",
    "version": "9.0.0",
    "authors": [
        {
            "name": "fiiSoft",
            "email": "fiisoft.production@gmail.com",
            "role": "Developer"
        }
    ],
    "require": {
        "php": ">=7.4.0 <8.5.0",
        "ext-json": "*",
        "ext-mbstring": "*"
    },
    "suggest": {
        "ext-pdo": "To use PDOStatementAdapter as Producer for Stream",
        "ramsey/uuid": "To use RandomUuid generator (backed by ramsey/uuid) as Producer for Stream",
        "symfony/uid": "To use RandomUuid generator (backed by symfony/uid) as Producer for Stream",
        "symfony/console": "To use Symfony console output as error logger",
        "psr/log": "To use PsrLogger as error logger",
        "aimeos/map": "To call certain scripts in examples directory",
        "bertptrs/phpstreams": "To call certain scripts in examples directory",
        "ebanx/stream": "To call certain scripts in examples directory",
        "gowork/values": "To call certain scripts in examples directory",
        "illuminate/collections": "To call certain scripts in examples directory",
        "loophp/collection": "To call certain scripts in examples directory",
        "sanmai/pipeline": "To call certain scripts in examples directory"
    },
    "autoload": {
        "psr-4": {
            "FiiSoft\\Jackdaw\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "FiiSoft\\Test\\Jackdaw\\": "tests/"
        }
    },
    "require-dev": {
        "phpunit/phpunit": ">=9.3.0",
        "symfony/console": ">=4.1.6",
        "symfony/uid": ">=5.0.0",
        "ramsey/uuid": ">=4.0.0",
        "psr/log": ">=1.0.0",
        "squizlabs/php_codesniffer": ">=3.4.0",
        "phpstan/phpstan": ">=1.10.31",
        "phpstan/phpstan-deprecation-rules": ">=1.0.0",
        "phpstan/phpstan-phpunit": ">=1.0.0",
        "phpstan/extension-installer": ">=1.1.0",
        "rector/rector": ">=0.18.3",
        "phpmd/phpmd": ">=2.0.0",
        "vimeo/psalm": ">=5.0.0",
        "infection/infection": ">=0.26.6"
    },
    "scripts": {
        "check": [
            "vendor/bin/phpcs --ignore-annotations -s",
            "vendor/bin/phpstan analyse src/",
            "vendor/bin/rector process src/ --dry-run",
            "vendor/bin/psalm",
            "vendor/bin/phpmd src html phpmd.xml.dist --reportfile var/phpmd.html --cache --cache-file var/phpmd.result-cache.php"
        ],
        "test": "vendor/bin/phpunit --no-coverage",
        "report" : "XDEBUG_MODE=coverage php vendor/bin/phpunit",
        "mutate": "vendor/bin/infection --test-framework=phpunit --only-covered --coverage=var/phpunit/xml/ --skip-initial-tests --threads=4 --min-covered-msi=100 --min-msi=100"
    },
    "scripts-descriptions": {
        "check": "Run code analysis tools",
        "test": "Run tests without code-coverage report",
        "report": "Run tests with code-coverage report",
        "mutate": "Run mutation tests. You need to generate code-coverage report before!"
    },
    "config": {
        "allow-plugins": {
            "phpstan/extension-installer": true,
            "infection/extension-installer": true
        }
    },
    "minimum-stability": "dev",
    "prefer-stable": true
}
